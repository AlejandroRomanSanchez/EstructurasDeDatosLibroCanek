import java.util.Comparator;

public class Arreglo {
    public static <T extends Comparable<T>> T[ ] creaSubArregloDe(T[ ] arreglo, int indiceInferior,
								 int indiceSuperior)	
	throws Exception {
	Comparable[ ] subArreglo;	
	int longitudDeSubArreglo;

	if(arreglo == null) {
	    throw new Exception("Null no debe ser el primer parámetro");
	}

	if(indiceInferior < 0 || indiceSuperior >= arreglo.length) {
	    throw new Exception("Alguno de los índices límites está fuera del rango del arreglo");
	}
	
	if(indiceInferior > indiceSuperior) {
	    throw new Exception("El índice inferior debe ser menor o igual que el indice superior");
	}

	longitudDeSubArreglo = 1 + indiceSuperior - indiceInferior;
	subArreglo = new Comparable[longitudDeSubArreglo];

	for(int i = 0; i < longitudDeSubArreglo; i++) {
	    subArreglo[i] = arreglo[indiceInferior + i];
	}

	return (T[ ]) subArreglo;
	
    }
    
    public static <T> int busquedaBinaria(T[ ] arreglo, T elemento, Comparator<T> comparador) {
	int longitudDeArreglo;
	int puntoMedio;

	if(arreglo == null || arreglo.length == 0) {
	    return -1;
	}

	longitudDeArreglo = arreglo.length;
	puntoMedio = longitudDeArreglo / 2;

	if(comparador.compare(elemento, arreglo[puntoMedio]) == 0) {
	    return puntoMedio;
	}

	if(comparador.compare(elemento, arreglo[puntoMedio]) < 0) {
	    
	}

	return 0;
    }
}
